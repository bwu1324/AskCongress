All POST:

/login
	authenticates user
	request: 
		{
			email: <string>					- user's email
			password: <password>			- user's password
		}
	response:
		Set-Cookie: auth: <string>			- session cookie
		{
			success: <boolean>				(true) (false) - logged in successfully or not
			error: <string>					('auth') ('unknown') (null) - type of error if there is an error, if not, then null
			message: <string>				- info about error, if no error, then null
		}

/signup
	creates new users
	request: 
		{
			username: <string>				- user's prefered username
			email: <string>					- user's email
			password: <string>				- user's password
		}
	response:
		Set-Cookie: auth: <string>			- session cookie
		{
			success: <boolean>				(true) (false) - logged in successfully or not
			error: <string>					('username') ('email') ('password') ('unknown') (null) - type of error if there is an error, if not, then null
			message: <string>				- info about error, if no error, then null
		}

/newThread
	creates a new thread
	request:
		Cookie: auth: <string>				- session cookie
		{
			title: <string>					- title of new thread
			body: <string>					- body text of new thread
			tags: <Array[<string>]>			- array of uids of congress memebers tagged
			type: <string>					('question') ('discussion') ('suggesting') ('other') - intened type of thread
		}
	response:
		{
			success: <boolean>				(true) (false) - created successfully or not
			error: <stirng>					('login') ('title') ('body') ('unkown') ('null') - type of error if there is an error, if not, then null
			message: <string>				- id of created thread if successfully, error if not
		}

/newComment
	creates a new comment
	request:
		Cookie: auth: <string>				- session cookie
		{
			comment: <string>				- text of new comment
			parent: <string>				- id of thread or comment being replied to
		}
	response:
		{
			success: <boolean>				(true) (false) - created successfully or not
			error: <stirng>					('login') ('comment') ('unkown') ('null') - type of error if there is an error, if not, then null
			message: <string>				- id of created comment if successfully, error if not
		}

/like
	toggles like of a comment or thread
	request:
		Cookie: auth: <string>				- session cookie
		{
			comment: <string>				- text of new comment
			id: <string>					- id of thread or comment being replied like
		}
	response:
		{
			success: <boolean>				(true) (false) - liked successfully or not
			like: <int>						(-1), (0), (1) - how much likes changed by
			dislike: <int>					(-1), (0), (1) - how much dislikes changed by
		}

/dislike
	toggles dislike of a comment
	request:
		Cookie: auth: <string>				- session cookie
		{
			comment: <string>				- text of new comment
			id: <string>					- id of thread or comment being disliked
		}
	response:
		{
			success: <boolean>				(true) (false) - disliked successfully or not
			like: <int>						(-1), (0), (1) - how much likes changed by
			dislike: <int>					(-1), (0), (1) - how much dislikes changed by
		}

/getThread
	gets thread information
	request: 
		{
			threadId: <string>				- id of thread
		}
	response:
		{
			success: <boolean>				(true) (false) - found thread successfully or not
			thread: <string>				- html string of thread to be displayed based on "threadBlock.ejs" template, may display error message if thread is not found
			commentIds: <array[<string>]>	- array of ids of thread's comments
		}

/getComment
	gets comment information
	request:
		{
			commentIds: <array[<string>]>	- array of comment ids to get
			exclude: <array[<string>]>		- array of comment ids to exclude from results
		}
	response:
		{
			success: <boolean>				(true) (false) - found thread successfully or not
			comments: <array[				- array of objects representing comments sorted by number of likes
				{
					id: <string>					- comment id
					comment: <string>				- html of comment
					commentIds: <array[<string>]	- array of ids of comment's comments
				}
			]
			loadMore: <boolean>				(true) (false) - if there are more comments to load
		}

/getTagged
	gets tagged information
	request:
		Cookie: auth: <string>				- session cookie
		{
			id: <string>					- id of user
			exclude: <array[<string>]>		- array of thread ids to exclude from results
		}
	response:
		{
			success: <boolean>				(true) (false) - found tagged successfully or not
			threads: <array[				- array of objects representing comments sorted by number of likes
				{
					id: <string>					- thread id
					thread: <string>				- html of thread
				}
			]
			loadMore: <boolean>				(true) (false) - if there are more threads to load
		}

/getTop
	get top threads information
	request:
		{
			exclude: <array[<string>]>		- array of thread ids to exclude from results
		}
	response:
		{
			success: <boolean>				(true) (false) - found top successfully or not
			threads: <array[				- array of objects representing comments sorted by number of likes
				{
					id: <string>					- thread id
					thread: <string>				- html of thread
				}
			]
		}

/search
	search for threads
	request:
		{
			search: <string>				- search string
			exclude: <array[<string>]>		- array of thread ids to exclude from results
		}
	response:
		{
			success: <boolean>				(true) (false) - found top successfully or not
			threads: <array[				- array of objects representing comments sorted by number of likes
				{
					id: <string>					- thread id
					thread: <string>				- html of thread
				}
			]
		}
